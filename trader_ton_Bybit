const axios = require("axios");
const crypto = require("crypto");

const API_KEY = "your_api_key";
const API_SECRET = "your_api_secret";
const BASE_URL = "https://api.bybit.com";

const symbol = "TONUSDT"; // –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
const amountInUSDT = 50; // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ USDT

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
function signRequest(params) {
    params.api_key = API_KEY;
    params.timestamp = Date.now();
    
    const query = Object.keys(params)
        .sort()
        .map((key) => `${key}=${params[key]}`)
        .join("&");
    
    params.sign = crypto.createHmac("sha256", API_SECRET).update(query).digest("hex");
    return params;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É TON
async function getMarketPrice() {
    try {
        const response = await axios.get(`${BASE_URL}/v2/public/tickers`, {
            params: { symbol },
        });
        return parseFloat(response.data.result.last_price);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã:", error.response?.data || error.message);
        return null;
    }
}

// –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞)
async function placeOrder(side, qty) {
    try {
        const params = signRequest({
            symbol,
            side, // "Buy" –∏–ª–∏ "Sell"
            order_type: "Market",
            qty,
            time_in_force: "GoodTillCancel",
        });

        const response = await axios.post(`${BASE_URL}/v2/private/order/create`, null, { params });
        console.log(`‚úÖ –û—Ä–¥–µ—Ä ${side} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:`, response.data);
        return response.data;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ ${side}:`, error.response?.data || error.message);
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function trade() {
    try {
        const price = await getMarketPrice();
        if (!price) return;
        
        console.log(`üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TON: ${price} USDT`);
        
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        const qty = (amountInUSDT / price).toFixed(2);
        console.log(`üîπ –ü–æ–∫—É–ø–∞–µ–º ${qty} TON`);

        // –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
        const buyOrder = await placeOrder("Buy", qty);
        if (!buyOrder) return;

        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π...");
        await new Promise((resolve) => setTimeout(resolve, 10000));

        // –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        const sellOrder = await placeOrder("Sell", qty);
        if (!sellOrder) return;

        console.log("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ:", error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
trade();
